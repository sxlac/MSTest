@ignore
@envnot=prod
Feature: Create providers based on the configuration

    Background:
        * eval if (env == 'prod') karate.abort();
        * def DataGen = function() { var DataGen = Java.type('helpers.data.DataGen'); return new DataGen(); }
        * def Faker = function() { var Faker = Java.type('helpers.data.Faker'); return new Faker(); }
        * configure retry = { count: 5, interval: 1000 }

        * def providerConfig =
            """
            {
            planId: 37,
            providerLicensedState: 'TX',
            trainingTypeId: 2,
            capacityPlanConfigs: [ { planId: 37, locationType: 1, startDay: 0, endDay: 1} ]
            }
            """

        * def providerDetails =
            """
            {
                "recruiterUserId": 1,
                "recruiterInTrainingId": 1,
                "recruiterOktaUserId": "0oaq0wnz6kZOdapot0h7",
                "recruiterInTrainingOktaUserId": "0oaq0wnz6kZOdapot0h7",
                "oktaUserId": "0oaq0wnz6kZOdapot0h7",
                "firstName": "#(Faker().firstName())",
                "lastName": "#(Faker().lastName())",
                "middleName": "",
                "degree": "MD",
                "nationalProviderIdentifier": "#(Faker().randomDigit(10))",
                "employeeType": 1,
                "primaryPhone": "0000000000",
                "secondaryPhone": "",
                "personalEmail": "ancillary-services-karate@signifyhealth.com",
                "gender": 1,
                "providerStatusId": 1,
                "averageEvaluationTimeInMinutes": 30,
                "primaryLanguage": 1,
                "secondaryLanguage": 0,
                "addressLineOne": "4055 Valley View ln",
                "addressLineTwo": "",
                "city": "Dallas",
                "state": "TX",
                "zipCode": "75244",
                "censeoHealthEmail": "ancillary-services-karate@signifyhealth.com",
                "specialization": "Family Practice",
                "dateOfBirth": "1980-01-01",
                "qaTrainingStatus": 2
            }
            """

    Scenario: Create provider and capacity based on configuration
        # Create the provider
        Given url providerApi
        And path 'Providers'
        And request providerDetails
        And retry until responseStatus == 200   
        When method POST
        Then status 200
        * providerDetails.providerId = response.providerId
        * set providerDetails.signature = ''

        # Add plans to the provider
        Given path `Providers/${providerDetails.providerId}/Plans`
        When request { "providerId": #(providerDetails.providerId), "addedPlans": [{ "planId": #(providerConfig.planId) }]}
        And retry until responseStatus == 200   
        When method POST
        Then status 200

        # Add provider licensing
        Given path 'ProviderLicensedState'
        And request { "providerId": #(providerDetails.providerId), "stateAbrv": #(providerConfig.providerLicensedState), "expirationDate": "2025-12-31T00:00:00.000Z", "isApproved": true, "licenseType": "StateLicense" }
        And retry until responseStatus == 200   
        When method PUT
        Then status 200

        # Update provider credentials
        Given path `Providers/${providerDetails.providerId}/Credential`
        And request
            """
            {
                "providerId": #(providerDetails.providerId),
                "backGroundCheckInitiated": true,
                "backGroundCheckPassed": true,
                "backGroundCheckCompletedDate": "2021-06-01T15:03:52.241Z",
                "credentialDate": "2021-06-01T15:03:52.241Z",
                "initialCredentialDate": "2021-06-01T15:03:52.241Z",
                "notInOfficeofInspectorGeneralExclusionListCheckedDate": "2021-06-01T15:03:52.241Z",
                "isNotInOfficeofInspectorGeneralExclusionList": true,
                "notInGeneralServicesAdministrationExclusionListCheckedDate": "2021-06-01T15:03:52.241Z",
                "isNotInGeneralServicesAdministrationExclusionList": true,
                "completedContractApplication": true,
                "recruiterUserId": 1,
                "isCredentialCca": true,
                "badgeId": "123456",
                "dateMailedBadge": "2021-06-01T15:03:52.241Z",
                "isNationalCredentialingOrganizationInformationTracked": true,
                "isCenseoHealthInformationTracked": true,
                "hasMalpracticeRecord": true,
                "hasDisciplinaryActions": true,
                "isEnrolledMedicare": true,
                "badgePhotoReceived": true,
                "isCredentialByOther": true,
                "staffingOrganization": "DataGenMatchMaker",
                "isWorkHistoryVerified": true,
                "dateWorkHistoryVerified": "2021-06-01T15:03:52.241Z",
                "verifiedBy": 1,
                "receivedW9": true,
                "internetSearchCompleted": true,
                "clinicalContingentWorkerAgreementSigned": true,
                "pendingMalpracticeClaims": true,
                "drugScreenOrdered": "2021-06-01T15:03:52.241Z",
                "drugScreenCompleted": "2021-06-01T15:03:52.241Z",
                "drugScreenPassed": true,
                "currentAppointmentEndDate": "3001-06-01T15:03:52.241Z",
                "currentAppointmentStartDate": "2021-06-01T15:03:52.241Z"
            }
            """
        And retry until responseStatus == 200   
        When method Post
        Then status 200

        Given path 'Credential'
        And request
            """
            {
            "ProviderId": #(providerDetails.providerId),
            "PatchCredentialDocument": [
            { "value": 2, "path": "/CredentialStatusId", "op": "replace" },
            { "value": "DataGenMatchMaker", "path": "/StaffingOrganization", "op": "replace" }
            ]
            }
            """
        And retry until responseStatus == 200   
        When method Patch
        Then status 200

        # Approve the credentials
        Given path `Providers/${providerDetails.providerId}/ProviderPlan/CredentialStatus`
        And request {"planIds": [#(providerConfig.planId)], "credentialStatus": 2 }
        And retry until responseStatus == 200   
        When method Patch
        Then status 200

        # Patch provider for in home
        Given path `providers/${providerDetails.providerId}/plan/${providerConfig.planId}`
        And request [{"value": true,  "path": "/CanSeeInHome", "op": "replace"}]
        And retry until responseStatus == 200   
        When method Patch
        Then status 200

        # Add capacity
        Given url capacityApi
        And path 'Capacity'
        And request
            """
            {
                "availabilityStatus": 6,
                "planId": #(providerConfig.planId),
                "ownerId": #(providerDetails.providerId),
                "startDate": "#(DataGen().isoDateStamp())",
                "endDate": "#(DataGen().isoDateStamp())",
                "locationType": 1,
                "state": "TX",
                "county": "Dallas County",
                "addressLineOne": "4055 Valley View ln",
                "city": "Dallas",
                "zipCode": "75244",
                "hasDummyPlan": false,
                "weekDays": [
                    {
                        "weekday": #(DataGen().todayAsNumber()),
                        "startTime": "06:00:00",
                        "endTime": "18:00:00",
                        "lunchDuration": 30,
                        "lunchStartTime": "12:00:00"
                    }
                ],
                "averageEvaluationTimeInMinutes": 30,
                "staticLocationDescription": "Location Notes from DataGenMatchMaker",
                "oktaUserId": "#(okta.clientId)"
            }
            """
        And retry until responseStatus == 200   
        When method POST
        Then status 200
        And match response.success == '#[_ > 0]'
        And match response.notSuccess == '##[]'

        Given path 'Capacity'
        And param ownerId = providerDetails.providerId
        And param startDate = DataGen().isoDateStamp()
        And param endDate = DataGen().isoDateStamp(2)
        And retry until responseStatus == 200   
        When method Get
        Then status 200
        And match response == '#[_ > 0]'
        And match each response..availabilityStatus == 6
        * def providerAvailabilityDetailId = response[0].providerAvailabilityDetailId

        # Approve the capacity
        Given path `Capacity/${providerAvailabilityDetailId}`
        And request
        """
            {
                "patchDocument": [
                    {
                        "value": "3",
                        "path": "/ProviderAvailabilityStatusId",
                        "op": "add"
                    },
                    {
                        "value": "32.665960",
                        "path": "/Latitude",
                        "op": "add"
                    },
                    {
                        "value": "-97.012620",
                        "path": "/Longitude",
                        "op": "add"
                    }
                ],
                "PatchCapacityAction": "Approve"
            }
        """
        And retry until responseStatus == 200   
        When method PATCH
        Then status 200