using FakeItEasy;
using MediatR;
using Microsoft.Extensions.Logging;
using NsbEventHandlers;
using NServiceBus.Testing;
using Signify.AkkaStreams.Kafka.Persistence;
using Signify.Dps.Observability.Library.Events;
using Signify.Dps.Observability.Library.Services;
using Signify.Spirometry.Core.Commands;
using Signify.Spirometry.Core.Data.Entities;
using Signify.Spirometry.Core.Data;
using Signify.Spirometry.Core.Models;
using Signify.Spirometry.Core.Queries;
using SpiroNsbEvents;
using System.Threading.Tasks;
using System.Threading;
using System;
using Xunit;

using NotPerformedReason = Signify.Spirometry.Core.Models.NotPerformedReason;
using StatusCode = Signify.Spirometry.Core.Models.StatusCode;

namespace Signify.Spirometry.Core.Tests.EventHandlers.Nsb;

public sealed class ExamNotPerformedHandlerTests
{
    private readonly IMediator _mediator = A.Fake<IMediator>();
    private readonly ITransactionSupplier _transactionSupplier = A.Fake<ITransactionSupplier>();
    private readonly IPublishObservability _publishObservability = A.Fake<IPublishObservability>();
    
    private ExamNotPerformedHandler CreateSubject()
    {
        return new ExamNotPerformedHandler(A.Dummy<ILogger<ExamNotPerformedHandler>>(),
            _transactionSupplier,
            _mediator,
            _publishObservability);
    }

    [Fact]
    public async Task Handle_WithMessage_AddsExamAndNotPerformedDetails()
    {
        // Arrange
        const int evaluationId = 1;
        const int spirometryExamId = 2;
        const NotPerformedReason reason = NotPerformedReason.NotInterested;
        const string notes = nameof(notes);

        var request = new ExamNotPerformedEvent
        {
            Exam = new SpirometryExam
            {
                // No SpirometryExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId
            },
            Info = new NotPerformedInfo(reason, notes)
        };

        var addExamResult = new SpirometryExam
        {
            SpirometryExamId = spirometryExamId,
            EvaluationId = evaluationId
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);

        var transaction = A.Fake<IBufferedTransaction>();
        A.CallTo(() => _transactionSupplier.BeginTransaction())
            .Returns(transaction);

        // Act
        var subject = CreateSubject();

        await subject.Handle(request, new TestableMessageHandlerContext());

        // Assert
        A.CallTo(() => _mediator.Send(A<AddExam>.That.Matches(
                cmd => cmd.Exam == request.Exam), A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();
        A.CallTo(() => _mediator.Send(A<AddExamNotPerformed>.That.Matches(
                cmd => cmd.SpirometryExam == addExamResult && cmd.Info == request.Info), A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();

        A.CallTo(() => _transactionSupplier.BeginTransaction())
            .MustHaveHappened();
        A.CallTo(() => transaction.CommitAsync(A<CancellationToken>._))
            .MustHaveHappened();
        A.CallTo(() => transaction.Dispose())
            .MustHaveHappened();
        
        A.CallTo(() => _publishObservability.RegisterEvent(A<ObservabilityEvent>._, true)).MustHaveHappenedOnceExactly();
    }

    [Fact]
    public async Task Handle_WithMessage_SendsExamNotPerformedStatus()
    {
        const int evaluationId = 1;
        const int spirometryExamId = 2;

        var request = new ExamNotPerformedEvent
        {
            Exam = new SpirometryExam
            {
                // No SpirometryExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId,
                EvaluationReceivedDateTime = DateTime.UtcNow
            },
            EventId = Guid.NewGuid()
        };

        var addExamResult = new SpirometryExam
        {
            SpirometryExamId = spirometryExamId,
            EvaluationId = evaluationId
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);

        var subject = CreateSubject();

        await subject.Handle(request, new TestableMessageHandlerContext());

        A.CallTo(() => _mediator.Send(A<Core.Events.ExamStatusEvent>._, A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();
        A.CallTo(() => _mediator.Send(A<Core.Events.ExamStatusEvent>.That.Matches(s =>
                    s.StatusCode == StatusCode.SpirometryExamNotPerformed &&
                    s.EventId == request.EventId &&
                    s.Exam == addExamResult &&
                    s.StatusDateTime == request.Exam.EvaluationReceivedDateTime),
                A<CancellationToken>._))
            .MustHaveHappened();
    }

    [Fact]
    public async Task Handle_WithMessage_SendsEvaluationProcessedEvent()
    {
        // Arrange
        const int evaluationId = 1;
        const int spirometryExamId = 2;
        var createdDateTime = DateTime.UtcNow;

        var request = new ExamNotPerformedEvent
        {
            Exam = new SpirometryExam
            {
                EvaluationId = evaluationId,
                SpirometryExamId = spirometryExamId
            }
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(request.Exam);

        A.CallTo(() => _mediator.Send(A<AddExamNotPerformed>._, A<CancellationToken>._))
            .Returns(new ExamNotPerformed { CreatedDateTime = createdDateTime });

        var context = new TestableMessageHandlerContext();

        // Act
        await CreateSubject().Handle(request, context);

        // Assert
        A.CallTo(() => _mediator.Send(A<SendEvaluationProcessedEvent>.That.Matches(e =>
            e.EvaluationProcessedEvent.EvaluationId == evaluationId
            && e.EvaluationProcessedEvent.SpirometryExamId == spirometryExamId
            && e.EvaluationProcessedEvent.CreatedDateTime == createdDateTime
            && !e.EvaluationProcessedEvent.IsPerformed
            && !e.EvaluationProcessedEvent.NeedsOverread
            && e.EvaluationProcessedEvent.IsBillable == false
            && e.EvaluationProcessedEvent.NeedsFlag == false
            && e.IsPayable == false
        ), A<CancellationToken>._)).MustHaveHappenedOnceExactly();
        A.CallTo(() => _mediator.Send(A<QueryPayable>._, A<CancellationToken>._)).MustNotHaveHappened();
    }
}