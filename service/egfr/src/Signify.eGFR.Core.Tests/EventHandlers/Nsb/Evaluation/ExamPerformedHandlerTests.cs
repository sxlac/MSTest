using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using EgfrNsbEvents;
using FakeItEasy;
using MediatR;
using Microsoft.Extensions.Logging;
using NsbEventHandlers;
using NServiceBus;
using NServiceBus.Testing;
using Signify.Dps.Observability.Library.Services;
using Signify.eGFR.Core.Commands;
using Signify.eGFR.Core.Constants;
using Signify.eGFR.Core.Data;
using Signify.eGFR.Core.Data.Entities;
using Signify.eGFR.Core.FeatureFlagging;
using Signify.eGFR.Core.Infrastructure.Vendor;
using Signify.eGFR.Core.Models;
using Xunit;

namespace Signify.eGFR.Core.Tests.EventHandlers.Nsb.Evaluation;

public sealed class ExamPerformedHandlerTests : IDisposable, IAsyncDisposable
{
    private readonly IMediator _mediator = A.Fake<IMediator>();
    private readonly IPublishObservability _publishObservability = A.Fake<IPublishObservability>();
    private readonly MockDbFixture _dbFixture = new();
    private readonly IFeatureFlags _featureFlags = A.Fake<IFeatureFlags>();
    private readonly IVendorDetermination _vendorDetermination = A.Fake<IVendorDetermination>();
    private readonly FakeApplicationTime _applicationTime = new();

    public void Dispose()
    {
        _dbFixture.Dispose();
    }

    public ValueTask DisposeAsync() => _dbFixture.DisposeAsync();

    private ExamPerformedHandler CreateSubject() => new(A.Dummy<ILogger<ExamPerformedHandler>>(),
        _mediator, A.Fake<ITransactionSupplier>(), _publishObservability, _applicationTime, _featureFlags,
        _vendorDetermination);

    [Fact]
    public async Task Handle_WithMessage_AddsExamAndResults()
    {
        // Arrange
        const int evaluationId = 1;
        const int examId = 2;

        var request = new ExamPerformedEvent
        {
            Exam = new Exam
            {
                // No ExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId
            },
            Result = new RawExamResult()
        };

        var addExamResult = new Exam
        {
            ExamId = examId,
            EvaluationId = evaluationId
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);

        // Act
        var subject = CreateSubject();

        await subject.Handle(request, A.Dummy<IMessageHandlerContext>());

        // Assert
        A.CallTo(() => _featureFlags.EnableOrderCreation).MustHaveHappened(1, Times.Exactly);
        A.CallTo(() => _mediator.Send(A<AddExam>.That.Matches(
                cmd => cmd.Exam == request.Exam), A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();
    }

    [Fact]
    public async Task Handle_WithMessage_SendsExamPerformedStatus()
    {
        const int evaluationId = 1;
        const int examId = 2;

        var request = new ExamPerformedEvent
        {
            Exam = new Exam
            {
                // No ExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId,
                EvaluationReceivedDateTime = DateTime.UtcNow
            },
            EventId = Guid.NewGuid()
        };

        var addExamResult = new Exam
        {
            ExamId = examId,
            EvaluationId = evaluationId
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);

        var context = new TestableMessageHandlerContext();

        await CreateSubject().Handle(request, context);

        Assert.Single(context.SentMessages);

        var message = context.SentMessages.First().Message<ExamStatusEvent>();

        A.CallTo(() => _featureFlags.EnableOrderCreation).MustHaveHappened(1, Times.Exactly);
        Assert.Equal(ExamStatusCode.ExamPerformed, message.StatusCode);
        Assert.Equal(request.EventId, message.EventId);
        Assert.Equal(evaluationId, message.EvaluationId);
        Assert.Equal(examId, message.ExamId);
        Assert.Equal(request.Exam.EvaluationReceivedDateTime, message.StatusDateTime);
    }

    [Fact]
    public async Task Handle_WithMessage_SendOrderCreation()
    {
        // Arrange
        const int evaluationId = 1;
        const int examId = 2;

        var request = new ExamPerformedEvent
        {
            Exam = new Exam
            {
                // No ExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId
            },
            Result = new RawExamResult
            {
                ValidBarcode = true
            }
        };

        var addExamResult = new Exam
        {
            ExamId = examId,
            EvaluationId = evaluationId
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);
        A.CallTo(() => _featureFlags.EnableOrderCreation).Returns(true);
        A.CallTo(() => _vendorDetermination.GetVendorFromBarcode(A<string>._)).Returns(VendorDetermination.Vendor.LetsGetChecked);

        // Act
        var subject = CreateSubject();
        var context = new TestableMessageHandlerContext();
        await subject.Handle(request, context);

        // Assert
        A.CallTo(() => _mediator.Send(A<AddExam>.That.Matches(
                cmd => cmd.Exam == request.Exam), A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();
        var message = context.FindSentMessage<OrderCreationEvent>();
        Assert.Equal(VendorDetermination.Vendor.LetsGetChecked.ToString().ToUpper(), message.Vendor.ToUpper());
        Assert.Equal(request.EventId, message.EventId);
        Assert.Equal(evaluationId, message.EvaluationId);
        Assert.Equal(examId, message.ExamId);
        Assert.Equal(request.Exam.EvaluationReceivedDateTime, message.StatusDateTime);
    }

    [Fact]
    public async Task Handle_WithMessage_AddExamToDb_NoOrderCreation()
    {
        // Arrange
        const int evaluationId = 1;
        const int examId = 2;

        var request = new ExamPerformedEvent
        {
            Exam = new Exam
            {
                // No ExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId
            },
            Result = new RawExamResult
            {
                ValidBarcode = false
            }
        };

        var addExamResult = new Exam
        {
            ExamId = examId,
            EvaluationId = evaluationId
        };

        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);
        A.CallTo(() => _featureFlags.EnableOrderCreation).Returns(true);
        A.CallTo(() => _vendorDetermination.GetVendorFromBarcode(A<string>._)).Returns(VendorDetermination.Vendor.LetsGetChecked);

        // Act
        var subject = CreateSubject();
        var context = new TestableMessageHandlerContext();
        await subject.Handle(request, context);

        // Assert
        A.CallTo(() => _mediator.Send(A<AddExam>.That.Matches(
                cmd => cmd.Exam == request.Exam), A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();
        var message = context.FindSentMessage<OrderCreationEvent>();
        Assert.Null(message);
    }

    [Theory]
    [MemberData(nameof(BarcodeSplit))]
    public async Task Handle_LGC_Barcode(BarcodeHistory barcodeHistory, string barcode,string alpha)
    {
        // Arrange
        const int evaluationId = 1;
        const int examId = 2;

        var request = new ExamPerformedEvent
        {
            Exam = new Exam
            {
                // No ExamId passed into the event; this will be generated by AddExam command
                EvaluationId = evaluationId
            },
            Result = new RawExamResult
            {
                ValidBarcode = true
            }
        };

        var addExamResult = new Exam
        {
            ExamId = examId,
            EvaluationId = evaluationId
        };
        A.CallTo(() => _mediator.Send(A<AddExam>._, A<CancellationToken>._))
            .Returns(addExamResult);
        A.CallTo(() => _mediator.Send(A<AddBarcode>._, A<CancellationToken>._)).Returns(barcodeHistory);
        
        A.CallTo(() => _featureFlags.EnableOrderCreation).Returns(true);
        A.CallTo(() => _vendorDetermination.GetVendorFromBarcode(A<string>._)).Returns(VendorDetermination.Vendor.LetsGetChecked);
        

        // Act
        var subject = CreateSubject();
        var context = new TestableMessageHandlerContext();
        await subject.Handle(request, context);

        // Assert
        A.CallTo(() => _mediator.Send(A<AddExam>.That.Matches(
                cmd => cmd.Exam == request.Exam), A<CancellationToken>._))
            .MustHaveHappenedOnceExactly();
        var message = context.FindSentMessage<OrderCreationEvent>();
        Assert.Equal(alpha, message.Context[Vendor.LgcAlphaCode]);
        Assert.Equal(barcode, message.Context[Vendor.LgcBarcode]);
    }
    
    public static IEnumerable<object[]> BarcodeSplit()
    {
        string barcode = "lgc-0000";
        string alpha = "1234";
        var barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode+"|"+alpha
        };
        yield return [barcodeHistory, barcode, alpha];
        
        barcode = "";
        alpha = "1234";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode+"|"+alpha
        };
        yield return [barcodeHistory, barcode, alpha];
        
        barcode = "lgc-0000";
        alpha = "";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode+"|"+alpha
        };
        yield return [barcodeHistory, barcode, alpha];
        
        barcode = "";
        alpha = "";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode+"|"+alpha
        };
        yield return [barcodeHistory, barcode, alpha];
        
        barcode = "lgc-0000";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode+"|"+null
        };
        yield return [barcodeHistory, barcode, ""];
        
        alpha = "1234";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = null+"|"+alpha
        };
        yield return [barcodeHistory, "", alpha];
        
        barcodeHistory = new BarcodeHistory
        {
            Barcode = null+"|"+null
        };
        yield return [barcodeHistory, "", ""];
        
        barcode = "lgc-0000";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode+"|"
        };
        yield return [barcodeHistory, barcode, ""];
        
        alpha = "1234";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = "|"+alpha
        };
        yield return [barcodeHistory, "", alpha];
        
        barcode = "lgc-0000";
        barcodeHistory = new BarcodeHistory
        {
            Barcode = barcode
        };
        yield return [barcodeHistory, barcode, null];
        
    
         barcodeHistory = new BarcodeHistory();
        yield return [barcodeHistory, null, null];
    }
}